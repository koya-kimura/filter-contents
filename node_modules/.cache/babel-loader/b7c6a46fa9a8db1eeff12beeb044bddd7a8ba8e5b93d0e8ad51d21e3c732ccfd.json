{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\takum\\\\Documents\\\\GitHub\\\\capture-sketch-test\\\\src\\\\CameraCapture\\\\CameraCapture.js\";\nimport React, { Component } from \"react\";\nimport p5 from 'p5';\n\n// シェーダリスト\nimport { fileList } from \"./fileList\";\n\n// 利用するシェーダのインデックス\nimport { shaderIndex } from \"../../src/App\";\n\n// export let P;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SampleSketch extends Component {\n  constructor(props) {\n    super(props);\n    this.sketchHandler = p => {\n      let filterShaders = []; // シェーダオブジェクト\n      let capture; // カメラのキャプチャ\n      const scl = 0.8;\n      p.preload = () => {\n        fileList.forEach(fp => {\n          filterShaders.push(p.loadShader(fp[\"vert\"], fp[\"frag\"]));\n        });\n      };\n      p.windowResized = () => {\n        canvas = p.resizeCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\n      };\n      p.setup = () => {\n        // メインキャンバスの作成\n        canvas = p.createCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\n\n        // 仮想キャンバスの作成\n        // pg = p5.createGraphics(p5.width, p5.height);\n\n        // Webカメラのキャプチャ開始\n        capture = p.createCapture(p.VIDEO);\n        capture.hide();\n      };\n      p.draw = () => {\n        p.shader(filterShaders[shaderIndex]);\n        filterShaders[shaderIndex].setUniform(\"u_time\", p.frameCount / 100);\n        filterShaders[shaderIndex].setUniform(\"u_Resolution\", [p.width, p.height]);\n        filterShaders[shaderIndex].setUniform(\"u_tex\", capture);\n\n        // filterShaders.setUniform('u_color0', normalizeColors[0]);\n        // filterShaders.setUniform('u_color1', normalizeColors[1]);\n        // filterShaders.setUniform('u_color2', normalizeColors[2]);\n        // filterShaders.setUniform('u_color3', normalizeColors[3]);\n        // filterShaders.setUniform('u_color4', normalizeColors[4]);\n\n        p.rect(0, 0, p.width, p.height);\n        console.log(p.mouseIsPressed);\n      };\n      p.mouseClicked = () => {\n        console.log(\"a\");\n        // p.savaCanvas()2\n        // p.saveCanvas('myCanvas.jpg');\n      };\n    };\n    this.sketchRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.sketch = new p5(this.sketchHandler, this.sketchRef.current);\n  }\n  componentWillUnmount() {\n    this.sketch.remove();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: this.sketchRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport function saveImage() {\n  console.log(\"a\");\n  // canvas.saveCanvas();\n  // p.saveCanvas('myCanvas.jpg');\n}","map":{"version":3,"names":["React","Component","p5","fileList","shaderIndex","jsxDEV","_jsxDEV","SampleSketch","constructor","props","sketchHandler","p","filterShaders","capture","scl","preload","forEach","fp","push","loadShader","windowResized","canvas","resizeCanvas","windowWidth","windowHeight","WEBGL","setup","createCanvas","createCapture","VIDEO","hide","draw","shader","setUniform","frameCount","width","height","rect","console","log","mouseIsPressed","mouseClicked","sketchRef","createRef","componentDidMount","sketch","current","componentWillUnmount","remove","render","ref","fileName","_jsxFileName","lineNumber","columnNumber","saveImage"],"sources":["C:/Users/takum/Documents/GitHub/capture-sketch-test/src/CameraCapture/CameraCapture.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport p5 from 'p5';\r\n\r\n// シェーダリスト\r\nimport { fileList } from \"./fileList\";\r\n\r\n// 利用するシェーダのインデックス\r\nimport { shaderIndex } from \"../../src/App\"\r\n\r\n// export let P;\r\n\r\nexport default class SampleSketch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sketchRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.sketch = new p5(this.sketchHandler, this.sketchRef.current);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.sketch.remove();\r\n  }\r\n\r\n  sketchHandler = p => {\r\n    let filterShaders = []; // シェーダオブジェクト\r\n    let capture;        // カメラのキャプチャ\r\n    const scl = 0.8;\r\n\r\n    p.preload = () => {\r\n      fileList.forEach(fp => {\r\n        filterShaders.push(p.loadShader(fp[\"vert\"], fp[\"frag\"]));\r\n      });\r\n    };\r\n\r\n    p.windowResized = () => {\r\n      canvas = p.resizeCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\r\n    }\r\n\r\n    p.setup = () => {\r\n      // メインキャンバスの作成\r\n      canvas = p.createCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\r\n\r\n      // 仮想キャンバスの作成\r\n      // pg = p5.createGraphics(p5.width, p5.height);\r\n\r\n      // Webカメラのキャプチャ開始\r\n      capture = p.createCapture(p.VIDEO);\r\n      capture.hide();\r\n    };\r\n\r\n    p.draw = () => {\r\n      p.shader(filterShaders[shaderIndex]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_time\", p.frameCount / 100);\r\n      filterShaders[shaderIndex].setUniform(\"u_Resolution\", [p.width, p.height]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_tex\", capture);\r\n\r\n      // filterShaders.setUniform('u_color0', normalizeColors[0]);\r\n      // filterShaders.setUniform('u_color1', normalizeColors[1]);\r\n      // filterShaders.setUniform('u_color2', normalizeColors[2]);\r\n      // filterShaders.setUniform('u_color3', normalizeColors[3]);\r\n      // filterShaders.setUniform('u_color4', normalizeColors[4]);\r\n\r\n      p.rect(0, 0, p.width, p.height);\r\n      console.log(p.mouseIsPressed)\r\n\r\n    };\r\n\r\n    p.mouseClicked = () => {\r\n      console.log(\"a\");\r\n      // p.savaCanvas()2\r\n      // p.saveCanvas('myCanvas.jpg');\r\n\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return <div ref={this.sketchRef}></div>;\r\n  }\r\n}\r\n\r\nexport function saveImage() {\r\n  console.log(\"a\");\r\n  // canvas.saveCanvas();\r\n  // p.saveCanvas('myCanvas.jpg');\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}