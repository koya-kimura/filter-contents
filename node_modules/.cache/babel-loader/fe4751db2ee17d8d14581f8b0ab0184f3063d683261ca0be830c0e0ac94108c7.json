{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport p5 from 'p5';\n\n// シェーダファイルへのパス\nimport VERT_FILE from \"./main.vert\";\nimport FRAG_FILE from \"./main.frag\";\n\n// 描画処理\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sketch = p => {\n  let theShader; // シェーダオブジェクト\n  let capture; // カメラのキャプチャ\n  const scl = 0.8;\n  p.preload = () => {\n    theShader = p.loadShader(VERT_FILE, FRAG_FILE);\n  };\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\n  };\n  p.setup = () => {\n    // メインキャンバスの作成\n    p.createCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL).parent(canvasParentRef);\n\n    // 仮想キャンバスの作成\n    // pg = p5.createGraphics(p5.width, p5.height);\n\n    // Webカメラのキャプチャ開始\n    capture = p.createCapture(p.VIDEO);\n    capture.hide();\n  };\n  p.draw = () => {\n    p.shader(theShader);\n    theShader.setUniform(\"u_time\", p.frameCount / 100);\n    theShader.setUniform(\"u_Resolution\", [p.width, p.height]);\n    theShader.setUniform(\"u_tex\", capture);\n\n    // theShader.setUniform('u_color0', normalizeColors[0]);\n    // theShader.setUniform('u_color1', normalizeColors[1]);\n    // theShader.setUniform('u_color2', normalizeColors[2]);\n    // theShader.setUniform('u_color3', normalizeColors[3]);\n    // theShader.setUniform('u_color4', normalizeColors[4]);\n\n    p.rect(0, 0, p.width, p.height);\n  };\n};\n\n// p5.jsのスケッチコンポーネント\nconst SampleSketch = () => {\n  _s();\n  useEffect(() => {\n    new p5(sketch); // p5.jsのキャンバスを生成\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(SampleSketch, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SampleSketch;\nexport default SampleSketch;\nvar _c;\n$RefreshReg$(_c, \"SampleSketch\");","map":{"version":3,"names":["React","useEffect","p5","VERT_FILE","FRAG_FILE","Fragment","_Fragment","jsxDEV","_jsxDEV","sketch","p","theShader","capture","scl","preload","loadShader","windowResized","resizeCanvas","windowWidth","windowHeight","WEBGL","setup","createCanvas","parent","canvasParentRef","createCapture","VIDEO","hide","draw","shader","setUniform","frameCount","width","height","rect","SampleSketch","_s","_c","$RefreshReg$"],"sources":["C:/Users/takum/Documents/GitHub/capture-sketch-test/src/SampleSketch.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport p5 from 'p5';\r\n\r\n// シェーダファイルへのパス\r\nimport VERT_FILE from \"./main.vert\"\r\nimport FRAG_FILE from \"./main.frag\"\r\n\r\n// 描画処理\r\nconst sketch = (p) => {\r\n  let theShader;  // シェーダオブジェクト\r\n  let capture;    // カメラのキャプチャ\r\n  const scl = 0.8;\r\n\r\n  p.preload = () => {\r\n    theShader = p.loadShader(VERT_FILE, FRAG_FILE);\r\n  };\r\n\r\n  p.windowResized = () => {\r\n    p.resizeCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\r\n  }\r\n\r\n  p.setup = () => {\r\n    // メインキャンバスの作成\r\n    p.createCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL).parent(canvasParentRef);\r\n\r\n    // 仮想キャンバスの作成\r\n    // pg = p5.createGraphics(p5.width, p5.height);\r\n\r\n    // Webカメラのキャプチャ開始\r\n    capture = p.createCapture(p.VIDEO);\r\n    capture.hide();\r\n  };\r\n\r\n  p.draw = () => {\r\n    p.shader(theShader);\r\n\r\n    theShader.setUniform(\"u_time\", p.frameCount / 100);\r\n    theShader.setUniform(\"u_Resolution\", [p.width, p.height]);\r\n\r\n    theShader.setUniform(\"u_tex\", capture);\r\n\r\n    // theShader.setUniform('u_color0', normalizeColors[0]);\r\n    // theShader.setUniform('u_color1', normalizeColors[1]);\r\n    // theShader.setUniform('u_color2', normalizeColors[2]);\r\n    // theShader.setUniform('u_color3', normalizeColors[3]);\r\n    // theShader.setUniform('u_color4', normalizeColors[4]);\r\n\r\n    p.rect(0, 0, p.width, p.height);\r\n  };\r\n};\r\n\r\n// p5.jsのスケッチコンポーネント\r\nconst SampleSketch = () => {\r\n  useEffect(() => {\r\n    new p5(sketch); // p5.jsのキャンバスを生成\r\n  }, []);\r\n\r\n  return (<></>);\r\n};\r\n\r\nexport default SampleSketch;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,EAAE,MAAM,IAAI;;AAEnB;AACA,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAIC,CAAC,IAAK;EACpB,IAAIC,SAAS,CAAC,CAAE;EAChB,IAAIC,OAAO,CAAC,CAAI;EAChB,MAAMC,GAAG,GAAG,GAAG;EAEfH,CAAC,CAACI,OAAO,GAAG,MAAM;IAChBH,SAAS,GAAGD,CAAC,CAACK,UAAU,CAACZ,SAAS,EAAEC,SAAS,CAAC;EAChD,CAAC;EAEDM,CAAC,CAACM,aAAa,GAAG,MAAM;IACtBN,CAAC,CAACO,YAAY,CAACP,CAAC,CAACQ,WAAW,GAAGL,GAAG,EAAEH,CAAC,CAACS,YAAY,GAAGN,GAAG,EAAEH,CAAC,CAACU,KAAK,CAAC;EACpE,CAAC;EAEDV,CAAC,CAACW,KAAK,GAAG,MAAM;IACd;IACAX,CAAC,CAACY,YAAY,CAACZ,CAAC,CAACQ,WAAW,GAAGL,GAAG,EAAEH,CAAC,CAACS,YAAY,GAAGN,GAAG,EAAEH,CAAC,CAACU,KAAK,CAAC,CAACG,MAAM,CAACC,eAAe,CAAC;;IAE1F;IACA;;IAEA;IACAZ,OAAO,GAAGF,CAAC,CAACe,aAAa,CAACf,CAAC,CAACgB,KAAK,CAAC;IAClCd,OAAO,CAACe,IAAI,CAAC,CAAC;EAChB,CAAC;EAEDjB,CAAC,CAACkB,IAAI,GAAG,MAAM;IACblB,CAAC,CAACmB,MAAM,CAAClB,SAAS,CAAC;IAEnBA,SAAS,CAACmB,UAAU,CAAC,QAAQ,EAAEpB,CAAC,CAACqB,UAAU,GAAG,GAAG,CAAC;IAClDpB,SAAS,CAACmB,UAAU,CAAC,cAAc,EAAE,CAACpB,CAAC,CAACsB,KAAK,EAAEtB,CAAC,CAACuB,MAAM,CAAC,CAAC;IAEzDtB,SAAS,CAACmB,UAAU,CAAC,OAAO,EAAElB,OAAO,CAAC;;IAEtC;IACA;IACA;IACA;IACA;;IAEAF,CAAC,CAACwB,IAAI,CAAC,CAAC,EAAE,CAAC,EAAExB,CAAC,CAACsB,KAAK,EAAEtB,CAAC,CAACuB,MAAM,CAAC;EACjC,CAAC;AACH,CAAC;;AAED;AACA,MAAME,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzBnC,SAAS,CAAC,MAAM;IACd,IAAIC,EAAE,CAACO,MAAM,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAQD,OAAA,CAAAF,SAAA,mBAAI,CAAC;AACf,CAAC;AAAC8B,EAAA,CANID,YAAY;AAAAE,EAAA,GAAZF,YAAY;AAQlB,eAAeA,YAAY;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}