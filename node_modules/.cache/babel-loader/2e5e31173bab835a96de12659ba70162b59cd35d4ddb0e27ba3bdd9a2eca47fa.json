{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\takum\\\\Documents\\\\GitHub\\\\filter-contents\\\\src\\\\CaptureContainer\\\\CameraCapture\\\\CameraCapture.js\";\nimport React, { Component } from \"react\";\nimport p5 from 'p5';\n\n// GLSLソースファイルのパスリスト\nimport { fileList } from \"./fileList\";\n\n// 利用するシェーダのインデックス\nimport { shaderIndex } from \"../../FilterSelectContainer/FilterSelectContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet P;\n//let w, h;\n\nexport default class CameraCapture extends Component {\n  constructor(props) {\n    super(props);\n    this.sketchHandler = p => {\n      let filterShaders = []; // シェーダオブジェクト\n      let capture; // カメラのキャプチャ\n\n      // ページに対するキャンバスの最大サイズ率\n      // const canvasScaleMax = 0.8;\n      // const canvasScaleMax = 0.75;\n      const canvasScaleMax = 0.7;\n      p.preload = () => {\n        // 全フィルタファイルを読み込んでフィルタ(Shaderオブジェクト)を生成\n        fileList.forEach(fp => {\n          filterShaders.push(p.loadShader(fp.vert, fp.frag));\n        });\n      };\n      p.setup = () => {\n        // saveImage()関数を使うためにpをグローバルへ引き上げる（荒ワザすぎるので修正の余地があるかも）\n        P = p;\n\n        // メインキャンバスの作成\n        p.createCanvas(p.windowWidth * canvasScaleMax, p.windowHeight * canvasScaleMax, p.WEBGL);\n        // p.createCanvas(p.windowWidth * canvasScaleMax, p.windowHeight * canvasScaleMax);\n        // p.createCanvas(p.windowWidth * scale, p.windowHeight * scale, p.WEBGL);\n\n        // 仮想キャンバスの作成\n        // pg = p5.createGraphics(p5.width, p5.height);\n\n        // Webカメラのキャプチャ開始\n        capture = p.createCapture(p.VIDEO, calculateLayout);\n        // capture = p.createCapture(p.VIDEO, { flipped: true });\n        // console.log(p.createCapture);\n        // capture = p.createCapture(p.VIDEO, true);\n\n        capture.hide();\n\n        // カメラの解像度を考慮したキャンバスサイズの変更\n        // calculateLayout();\n      };\n      p.draw = () => {\n        p.shader(filterShaders[shaderIndex]);\n        filterShaders[shaderIndex].setUniform(\"u_time\", p.frameCount / 100);\n        filterShaders[shaderIndex].setUniform(\"u_Resolution\", [p.width, p.height]);\n        // filterShaders[shaderIndex].setUniform(\"u_Resolution\", [capture.width * scale, capture.height * scale]);\n\n        filterShaders[shaderIndex].setUniform(\"u_tex\", capture);\n\n        // filterShaders.setUniform('u_color0', normalizeColors[0]);\n        // filterShaders.setUniform('u_color1', normalizeColors[1]);\n        // filterShaders.setUniform('u_color2', normalizeColors[2]);\n        // filterShaders.setUniform('u_color3', normalizeColors[3]);\n        // filterShaders.setUniform('u_color4', normalizeColors[4]);\n\n        // キャプチャした画像にShaderでフィルタかけたものを描画\n        p.rect(0, 0, p.width, p.height);\n      };\n      p.windowResized = () => {\n        // キャンバスサイズを考慮したカメラの比率計算\n        calculateLayout();\n      };\n\n      // キャンバスサイズを考慮したカメラの比率計算\n      function calculateLayout() {\n        // リサイズされたキャンバスサイズの計算\n        let newWidth = p.windowWidth * canvasScaleMax;\n        let newHeight = p.windowHeight * canvasScaleMax;\n\n        // キャンバスとカメラ映像のアスペクト比に基づくスケーリング比を計算\n        let scale = p.min(newWidth / capture.width, newHeight / capture.height);\n        console.log(capture.width, capture.height);\n        p.resizeCanvas(capture.width * scale, capture.height * scale, p.WEBGL);\n      }\n    };\n    this.sketchRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.sketch = new p5(this.sketchHandler, this.sketchRef.current);\n  }\n  componentWillUnmount() {\n    this.sketch.remove();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CameraCapture\",\n      ref: this.sketchRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// 画像の保存\nexport function saveImage() {\n  P.saveCanvas();\n}","map":{"version":3,"names":["React","Component","p5","fileList","shaderIndex","jsxDEV","_jsxDEV","P","CameraCapture","constructor","props","sketchHandler","p","filterShaders","capture","canvasScaleMax","preload","forEach","fp","push","loadShader","vert","frag","setup","createCanvas","windowWidth","windowHeight","WEBGL","createCapture","VIDEO","calculateLayout","hide","draw","shader","setUniform","frameCount","width","height","rect","windowResized","newWidth","newHeight","scale","min","console","log","resizeCanvas","sketchRef","createRef","componentDidMount","sketch","current","componentWillUnmount","remove","render","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","saveImage","saveCanvas"],"sources":["C:/Users/takum/Documents/GitHub/filter-contents/src/CaptureContainer/CameraCapture/CameraCapture.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport p5 from 'p5';\r\n\r\n// GLSLソースファイルのパスリスト\r\nimport { fileList } from \"./fileList\";\r\n\r\n// 利用するシェーダのインデックス\r\nimport { shaderIndex } from \"../../FilterSelectContainer/FilterSelectContainer\"\r\n\r\nlet P;\r\n//let w, h;\r\n\r\nexport default class CameraCapture extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sketchRef = React.createRef();\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.sketch = new p5(this.sketchHandler, this.sketchRef.current);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.sketch.remove();\r\n  }\r\n\r\n  sketchHandler = p => {\r\n    let filterShaders = []; // シェーダオブジェクト\r\n    let capture;        // カメラのキャプチャ\r\n\r\n    // ページに対するキャンバスの最大サイズ率\r\n    // const canvasScaleMax = 0.8;\r\n    // const canvasScaleMax = 0.75;\r\n    const canvasScaleMax = 0.7;\r\n\r\n    p.preload = () => {\r\n      // 全フィルタファイルを読み込んでフィルタ(Shaderオブジェクト)を生成\r\n      fileList.forEach(fp => {\r\n        filterShaders.push(p.loadShader(fp.vert, fp.frag));\r\n      });\r\n    };\r\n\r\n    p.setup = () => {\r\n      // saveImage()関数を使うためにpをグローバルへ引き上げる（荒ワザすぎるので修正の余地があるかも）\r\n      P = p;\r\n\r\n      // メインキャンバスの作成\r\n      p.createCanvas(p.windowWidth * canvasScaleMax, p.windowHeight * canvasScaleMax, p.WEBGL);\r\n      // p.createCanvas(p.windowWidth * canvasScaleMax, p.windowHeight * canvasScaleMax);\r\n      // p.createCanvas(p.windowWidth * scale, p.windowHeight * scale, p.WEBGL);\r\n\r\n      // 仮想キャンバスの作成\r\n      // pg = p5.createGraphics(p5.width, p5.height);\r\n\r\n      // Webカメラのキャプチャ開始\r\n      capture = p.createCapture(p.VIDEO, calculateLayout);\r\n      // capture = p.createCapture(p.VIDEO, { flipped: true });\r\n      // console.log(p.createCapture);\r\n      // capture = p.createCapture(p.VIDEO, true);\r\n\r\n      capture.hide();\r\n\r\n      // カメラの解像度を考慮したキャンバスサイズの変更\r\n      // calculateLayout();\r\n    };\r\n\r\n    p.draw = () => {\r\n      p.shader(filterShaders[shaderIndex]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_time\", p.frameCount / 100);\r\n      filterShaders[shaderIndex].setUniform(\"u_Resolution\", [p.width, p.height]);\r\n      // filterShaders[shaderIndex].setUniform(\"u_Resolution\", [capture.width * scale, capture.height * scale]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_tex\", capture);\r\n\r\n      // filterShaders.setUniform('u_color0', normalizeColors[0]);\r\n      // filterShaders.setUniform('u_color1', normalizeColors[1]);\r\n      // filterShaders.setUniform('u_color2', normalizeColors[2]);\r\n      // filterShaders.setUniform('u_color3', normalizeColors[3]);\r\n      // filterShaders.setUniform('u_color4', normalizeColors[4]);\r\n\r\n      // キャプチャした画像にShaderでフィルタかけたものを描画\r\n      p.rect(0, 0, p.width, p.height);\r\n    };\r\n\r\n    p.windowResized = () => {\r\n      // キャンバスサイズを考慮したカメラの比率計算\r\n      calculateLayout();\r\n    }\r\n\r\n    // キャンバスサイズを考慮したカメラの比率計算\r\n    function calculateLayout() {\r\n      // リサイズされたキャンバスサイズの計算\r\n      let newWidth = p.windowWidth * canvasScaleMax;\r\n      let newHeight = p.windowHeight * canvasScaleMax;\r\n\r\n      // キャンバスとカメラ映像のアスペクト比に基づくスケーリング比を計算\r\n      let scale = p.min(newWidth / capture.width, newHeight / capture.height);\r\n\r\n      console.log(capture.width, capture.height);\r\n      p.resizeCanvas(capture.width * scale, capture.height * scale, p.WEBGL);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CameraCapture\" ref={this.sketchRef}></div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// 画像の保存\r\nexport function saveImage() {\r\n  P.saveCanvas();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}