{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\takum\\\\Documents\\\\GitHub\\\\filter-contents\\\\src\\\\CaptureContainer\\\\CameraCapture\\\\CameraCapture.js\";\nimport React, { Component } from \"react\";\nimport p5 from 'p5';\n\n// GLSLソースファイルのパスリスト\nimport { fileList } from \"./fileList\";\n\n// 利用するシェーダのインデックス\nimport { shaderIndex } from \"../../../src/App\";\nimport CaptureFrame from \"../../image/CaptureFrame.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet P, w, h;\nexport default class CameraCapture extends Component {\n  constructor(props) {\n    super(props);\n    this.sketchHandler = p => {\n      let filterShaders = []; // シェーダオブジェクト\n      let capture; // カメラのキャプチャ\n      // const scl = 0.8;\n      // const scl = 0.75;\n      const scl = 0.5;\n      p.preload = () => {\n        fileList.forEach(fp => {\n          filterShaders.push(p.loadShader(fp.vert, fp.frag));\n        });\n      };\n      p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\n      };\n      p.setup = () => {\n        // saveImage()関数を使うためにpをグローバルへ引き上げる\n        P = p;\n\n        // メインキャンバスの作成\n        p.createCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\n\n        // 仮想キャンバスの作成\n        // pg = p5.createGraphics(p5.width, p5.height);\n\n        // Webカメラのキャプチャ開始\n        capture = p.createCapture(p.VIDEO);\n        // capture = p.createCapture(p.VIDEO, { flipped: true });\n        // console.log(p.createCapture);\n        // capture = p.createCapture(p.VIDEO, true);\n        capture.hide();\n      };\n      p.draw = () => {\n        p.shader(filterShaders[shaderIndex]);\n        filterShaders[shaderIndex].setUniform(\"u_time\", p.frameCount / 100);\n        filterShaders[shaderIndex].setUniform(\"u_Resolution\", [p.width, p.height]);\n        filterShaders[shaderIndex].setUniform(\"u_tex\", capture);\n\n        // filterShaders.setUniform('u_color0', normalizeColors[0]);\n        // filterShaders.setUniform('u_color1', normalizeColors[1]);\n        // filterShaders.setUniform('u_color2', normalizeColors[2]);\n        // filterShaders.setUniform('u_color3', normalizeColors[3]);\n        // filterShaders.setUniform('u_color4', normalizeColors[4]);\n\n        p.rect(0, 0, p.width, p.height);\n        w = p.windowWidth * scl;\n        h = p.windowHeight * scl;\n        console.log(w + \", \" + P.width);\n      };\n    };\n    this.sketchRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.sketch = new p5(this.sketchHandler, this.sketchRef.current);\n  }\n  componentWillUnmount() {\n    this.sketch.remove();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"CameraCapture\",\n        ref: this.sketchRef,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: CaptureFrame,\n          width: w + \"px\",\n          height: h + \"px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n\n// 画像の保存\nexport function saveImage() {\n  P.saveCanvas();\n}","map":{"version":3,"names":["React","Component","p5","fileList","shaderIndex","CaptureFrame","jsxDEV","_jsxDEV","Fragment","_Fragment","P","w","h","CameraCapture","constructor","props","sketchHandler","p","filterShaders","capture","scl","preload","forEach","fp","push","loadShader","vert","frag","windowResized","resizeCanvas","windowWidth","windowHeight","WEBGL","setup","createCanvas","createCapture","VIDEO","hide","draw","shader","setUniform","frameCount","width","height","rect","console","log","sketchRef","createRef","componentDidMount","sketch","current","componentWillUnmount","remove","render","children","className","ref","src","fileName","_jsxFileName","lineNumber","columnNumber","saveImage","saveCanvas"],"sources":["C:/Users/takum/Documents/GitHub/filter-contents/src/CaptureContainer/CameraCapture/CameraCapture.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport p5 from 'p5';\r\n\r\n// GLSLソースファイルのパスリスト\r\nimport { fileList } from \"./fileList\";\r\n\r\n// 利用するシェーダのインデックス\r\nimport { shaderIndex } from \"../../../src/App\"\r\n\r\nimport CaptureFrame from \"../../image/CaptureFrame.png\";\r\n\r\n\r\nlet P, w, h;\r\n\r\nexport default class CameraCapture extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sketchRef = React.createRef();\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.sketch = new p5(this.sketchHandler, this.sketchRef.current);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.sketch.remove();\r\n  }\r\n\r\n  sketchHandler = p => {\r\n    let filterShaders = []; // シェーダオブジェクト\r\n    let capture;        // カメラのキャプチャ\r\n    // const scl = 0.8;\r\n    // const scl = 0.75;\r\n    const scl = 0.5;\r\n\r\n    p.preload = () => {\r\n      fileList.forEach(fp => {\r\n        filterShaders.push(p.loadShader(fp.vert, fp.frag));\r\n      });\r\n    };\r\n\r\n    p.windowResized = () => {\r\n      p.resizeCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\r\n    }\r\n\r\n    p.setup = () => {\r\n      // saveImage()関数を使うためにpをグローバルへ引き上げる\r\n      P = p;\r\n\r\n      // メインキャンバスの作成\r\n      p.createCanvas(p.windowWidth * scl, p.windowHeight * scl, p.WEBGL);\r\n\r\n      // 仮想キャンバスの作成\r\n      // pg = p5.createGraphics(p5.width, p5.height);\r\n\r\n      // Webカメラのキャプチャ開始\r\n      capture = p.createCapture(p.VIDEO);\r\n      // capture = p.createCapture(p.VIDEO, { flipped: true });\r\n      // console.log(p.createCapture);\r\n      // capture = p.createCapture(p.VIDEO, true);\r\n      capture.hide();\r\n    };\r\n\r\n    p.draw = () => {\r\n      p.shader(filterShaders[shaderIndex]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_time\", p.frameCount / 100);\r\n      filterShaders[shaderIndex].setUniform(\"u_Resolution\", [p.width, p.height]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_tex\", capture);\r\n\r\n      // filterShaders.setUniform('u_color0', normalizeColors[0]);\r\n      // filterShaders.setUniform('u_color1', normalizeColors[1]);\r\n      // filterShaders.setUniform('u_color2', normalizeColors[2]);\r\n      // filterShaders.setUniform('u_color3', normalizeColors[3]);\r\n      // filterShaders.setUniform('u_color4', normalizeColors[4]);\r\n\r\n      p.rect(0, 0, p.width, p.height);\r\n\r\n      w = p.windowWidth * scl;\r\n      h = p.windowHeight * scl;\r\n      console.log(w + \", \" + P.width)\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"CameraCapture\" ref={this.sketchRef}>\r\n          <img src={CaptureFrame} width={w + \"px\"} height={h + \"px\"}></img>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// 画像の保存\r\nexport function saveImage() {\r\n  P.saveCanvas();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}