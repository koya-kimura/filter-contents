{"ast":null,"code":"import React,{Component}from\"react\";import p5 from'p5';// GLSLソースファイルのパスリスト\nimport{fileList}from\"./fileList\";// 利用するシェーダのインデックス\nimport{shaderIndex}from\"../../FilterSelectContainer/FilterSelectContainer\";import{jsx as _jsx}from\"react/jsx-runtime\";let P;//let w, h;\nexport default class CameraCapture extends Component{constructor(props){super(props);this.sketchHandler=p=>{let filterShaders=[];// シェーダオブジェクト\nlet capture;// カメラのキャプチャ\n// ページに対するキャンバスの最大サイズ率\n// const canvasScaleMax = 0.8;\n// const canvasScaleMax = 0.75;\nconst canvasScaleMax=0.5;p.preload=()=>{// 全フィルタファイルを読み込んでフィルタ(Shaderオブジェクト)を生成\nfileList.forEach(fp=>{filterShaders.push(p.loadShader(fp.vert,fp.frag));});};p.setup=()=>{// saveImage()関数を使うためにpをグローバルへ引き上げる（荒ワザすぎるので修正の余地があるかも）\nP=p;// メインキャンバスの作成\np.createCanvas(p.windowWidth*canvasScaleMax,p.windowHeight*canvasScaleMax,p.WEBGL);// p.createCanvas(p.windowWidth * canvasScaleMax, p.windowHeight * canvasScaleMax);\n// p.createCanvas(p.windowWidth * scale, p.windowHeight * scale, p.WEBGL);\n// 仮想キャンバスの作成\n// pg = p5.createGraphics(p5.width, p5.height);\n// Webカメラのキャプチャ開始\ncapture=p.createCapture(p.VIDEO,calculateLayout);// capture = p.createCapture(p.VIDEO, { flipped: true });\n// console.log(p.createCapture);\n// capture = p.createCapture(p.VIDEO, true);\ncapture.hide();// カメラの解像度を考慮したキャンバスサイズの変更\n// calculateLayout();\n};p.draw=()=>{p.shader(filterShaders[shaderIndex]);filterShaders[shaderIndex].setUniform(\"u_time\",p.frameCount/100);filterShaders[shaderIndex].setUniform(\"u_Resolution\",[p.width,p.height]);// filterShaders[shaderIndex].setUniform(\"u_Resolution\", [capture.width * scale, capture.height * scale]);\nfilterShaders[shaderIndex].setUniform(\"u_tex\",capture);// filterShaders.setUniform('u_color0', normalizeColors[0]);\n// filterShaders.setUniform('u_color1', normalizeColors[1]);\n// filterShaders.setUniform('u_color2', normalizeColors[2]);\n// filterShaders.setUniform('u_color3', normalizeColors[3]);\n// filterShaders.setUniform('u_color4', normalizeColors[4]);\n// キャプチャした画像にShaderでフィルタかけたものを描画\np.rect(0,0,p.width,p.height);};p.windowResized=()=>{// キャンバスサイズを考慮したカメラの比率計算\ncalculateLayout();};// キャンバスサイズを考慮したカメラの比率計算\nfunction calculateLayout(){// リサイズされたキャンバスサイズの計算\nlet newWidth=p.windowWidth*canvasScaleMax;let newHeight=p.windowHeight*canvasScaleMax;// キャンバスとカメラ映像のアスペクト比に基づくスケーリング比を計算\nlet scale=p.min(newWidth/capture.width,newHeight/capture.height);console.log(capture.width,capture.height);p.resizeCanvas(capture.width*scale,capture.height*scale,p.WEBGL);}};this.sketchRef=/*#__PURE__*/React.createRef();}componentDidMount(){this.sketch=new p5(this.sketchHandler,this.sketchRef.current);}componentWillUnmount(){this.sketch.remove();}render(){return/*#__PURE__*/_jsx(\"div\",{className:\"CameraCapture\",ref:this.sketchRef});}}// 画像の保存\nexport function saveImage(){P.saveCanvas();}","map":{"version":3,"names":["React","Component","p5","fileList","shaderIndex","jsx","_jsx","P","CameraCapture","constructor","props","sketchHandler","p","filterShaders","capture","canvasScaleMax","preload","forEach","fp","push","loadShader","vert","frag","setup","createCanvas","windowWidth","windowHeight","WEBGL","createCapture","VIDEO","calculateLayout","hide","draw","shader","setUniform","frameCount","width","height","rect","windowResized","newWidth","newHeight","scale","min","console","log","resizeCanvas","sketchRef","createRef","componentDidMount","sketch","current","componentWillUnmount","remove","render","className","ref","saveImage","saveCanvas"],"sources":["C:/Users/takum/Documents/GitHub/filter-contents/src/CaptureContainer/CameraCapture/CameraCapture.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport p5 from 'p5';\r\n\r\n// GLSLソースファイルのパスリスト\r\nimport { fileList } from \"./fileList\";\r\n\r\n// 利用するシェーダのインデックス\r\nimport { shaderIndex } from \"../../FilterSelectContainer/FilterSelectContainer\"\r\n\r\nlet P;\r\n//let w, h;\r\n\r\nexport default class CameraCapture extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sketchRef = React.createRef();\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.sketch = new p5(this.sketchHandler, this.sketchRef.current);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.sketch.remove();\r\n  }\r\n\r\n  sketchHandler = p => {\r\n    let filterShaders = []; // シェーダオブジェクト\r\n    let capture;        // カメラのキャプチャ\r\n\r\n    // ページに対するキャンバスの最大サイズ率\r\n    // const canvasScaleMax = 0.8;\r\n    // const canvasScaleMax = 0.75;\r\n    const canvasScaleMax = 0.5;\r\n\r\n    p.preload = () => {\r\n      // 全フィルタファイルを読み込んでフィルタ(Shaderオブジェクト)を生成\r\n      fileList.forEach(fp => {\r\n        filterShaders.push(p.loadShader(fp.vert, fp.frag));\r\n      });\r\n    };\r\n\r\n    p.setup = () => {\r\n      // saveImage()関数を使うためにpをグローバルへ引き上げる（荒ワザすぎるので修正の余地があるかも）\r\n      P = p;\r\n\r\n      // メインキャンバスの作成\r\n      p.createCanvas(p.windowWidth * canvasScaleMax, p.windowHeight * canvasScaleMax, p.WEBGL);\r\n      // p.createCanvas(p.windowWidth * canvasScaleMax, p.windowHeight * canvasScaleMax);\r\n      // p.createCanvas(p.windowWidth * scale, p.windowHeight * scale, p.WEBGL);\r\n\r\n      // 仮想キャンバスの作成\r\n      // pg = p5.createGraphics(p5.width, p5.height);\r\n\r\n      // Webカメラのキャプチャ開始\r\n      capture = p.createCapture(p.VIDEO, calculateLayout);\r\n      // capture = p.createCapture(p.VIDEO, { flipped: true });\r\n      // console.log(p.createCapture);\r\n      // capture = p.createCapture(p.VIDEO, true);\r\n\r\n      capture.hide();\r\n\r\n      // カメラの解像度を考慮したキャンバスサイズの変更\r\n      // calculateLayout();\r\n    };\r\n\r\n    p.draw = () => {\r\n      p.shader(filterShaders[shaderIndex]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_time\", p.frameCount / 100);\r\n      filterShaders[shaderIndex].setUniform(\"u_Resolution\", [p.width, p.height]);\r\n      // filterShaders[shaderIndex].setUniform(\"u_Resolution\", [capture.width * scale, capture.height * scale]);\r\n\r\n      filterShaders[shaderIndex].setUniform(\"u_tex\", capture);\r\n\r\n      // filterShaders.setUniform('u_color0', normalizeColors[0]);\r\n      // filterShaders.setUniform('u_color1', normalizeColors[1]);\r\n      // filterShaders.setUniform('u_color2', normalizeColors[2]);\r\n      // filterShaders.setUniform('u_color3', normalizeColors[3]);\r\n      // filterShaders.setUniform('u_color4', normalizeColors[4]);\r\n\r\n      // キャプチャした画像にShaderでフィルタかけたものを描画\r\n      p.rect(0, 0, p.width, p.height);\r\n    };\r\n\r\n    p.windowResized = () => {\r\n      // キャンバスサイズを考慮したカメラの比率計算\r\n      calculateLayout();\r\n    }\r\n\r\n    // キャンバスサイズを考慮したカメラの比率計算\r\n    function calculateLayout() {\r\n      // リサイズされたキャンバスサイズの計算\r\n      let newWidth = p.windowWidth * canvasScaleMax;\r\n      let newHeight = p.windowHeight * canvasScaleMax;\r\n\r\n      // キャンバスとカメラ映像のアスペクト比に基づくスケーリング比を計算\r\n      let scale = p.min(newWidth / capture.width, newHeight / capture.height);\r\n\r\n      console.log(capture.width, capture.height);\r\n      p.resizeCanvas(capture.width * scale, capture.height * scale, p.WEBGL);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CameraCapture\" ref={this.sketchRef}></div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// 画像の保存\r\nexport function saveImage() {\r\n  P.saveCanvas();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}